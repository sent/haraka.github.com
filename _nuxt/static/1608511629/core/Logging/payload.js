__NUXT_JSONP__("/core/Logging", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F){return {data:[{document:{slug:"Logging",title:"Haraka Logging",position:11,category:"Core",toc:[{id:p,depth:q,text:r},{id:s,depth:q,text:t}],body:{type:"root",children:[{type:b,tag:d,props:{},children:[{type:a,value:"Haraka has built-in logging (see API docs below) and support for log plugins."}]},{type:a,value:c},{type:b,tag:u,props:{},children:[{type:a,value:c},{type:b,tag:v,props:{},children:[{type:a,value:"log.ini"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Contains settings for log level, timestamps, and format. See the example log.ini file for examples."}]},{type:a,value:c},{type:b,tag:u,props:{},children:[{type:a,value:c},{type:b,tag:v,props:{},children:[{type:a,value:"loglevel"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"The loglevel file provides a finger-friendly way to change the loglevel on the CLI. Use it like so: "},{type:b,tag:e,props:{},children:[{type:a,value:"echo DEBUG \u003E config\u002Floglevel"}]},{type:a,value:". When the level in log.ini is set and the loglevel file is present, the loglevel file wins. During runtime, whichever was edited most recently wins."}]},{type:a,value:c},{type:b,tag:w,props:{id:p},children:[{type:b,tag:k,props:{href:"#logging-api",ariaHidden:x,tabIndex:y},children:[{type:b,tag:z,props:{className:[A,B]},children:[]}]},{type:a,value:r}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Logging conventions within Haraka"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"This section pertains to the built in logging. For log plugins like ("},{type:b,tag:k,props:{href:"https:\u002F\u002Fgithub.com\u002Fharaka\u002Fharaka-plugin-syslog",rel:[l,m,n],target:o},children:[{type:a,value:"haraka-plugin-syslog"}]},{type:a,value:"), refer to the plugin's docs."}]},{type:a,value:c},{type:b,tag:w,props:{id:s},children:[{type:b,tag:k,props:{href:"#see-also",ariaHidden:x,tabIndex:y},children:[{type:b,tag:z,props:{className:[A,B]},children:[]}]},{type:a,value:t}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:k,props:{href:C,rel:[l,m,n],target:o},children:[{type:a,value:C}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"The logline by default will be in the form of:"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:e,props:{},children:[{type:a,value:"[level] [uuid] [origin] message\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Where origin is \"core\" or the name of the plugin which\ntriggered the message, and \"uuid\" is the ID of the\nconnection associated with the message."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"When calling a log method on logger, you should provide the\nplugin object and the connection object anywhere in the arguments\nto the log method."}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:e,props:{},children:[{type:a,value:"logger.logdebug(\"i like turtles\", plugin, connection);\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Will yield, for example,"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:e,props:{},children:[{type:a,value:"[DEBUG] [7F1C820F-DC79-4192-9AA6-5307354B20A6] [dnsbl] i like turtles\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"If you call the log method on the connection object, you can\nforego the connection as argument:"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:e,props:{},children:[{type:a,value:"connection.logdebug(\"turtles all the way down\", plugin);\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"and similarly for the log methods on the plugin object:"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:e,props:{},children:[{type:a,value:"plugin.logdebug(\"he just really likes turtles\", connection);\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"failing to provide a connection and\u002For plugin object will leave\nthe default values in the log (currently \"core\")."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"This is implemented by testing for argument type in\nthe logger.js log* method. objects-as-arguments are then sniffed\nto try to determine if they're a connection or plugin instance."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"The logfmt format is also supported and can be enabled by changing the format\nfrom "},{type:b,tag:e,props:{},children:[{type:a,value:"default"}]},{type:a,value:" to "},{type:b,tag:e,props:{},children:[{type:a,value:"logfmt"}]},{type:a,value:" in the "},{type:b,tag:e,props:{},children:[{type:a,value:"config\u002Flog.ini"}]},{type:a,value:" file which will\nstart logging in the following format below."}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:e,props:{},children:[{type:a,value:"level=PROTOCOL uuid=9FF7F70E-5D57-435A-AAD9-EA069B6159D9.1 source=core message=\"S: 354 go ahead, make my day\"\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Any objects you pass through will also be appeneded to the log line as\nkey=value and will look like this:"}]},{type:a,value:c},{type:b,tag:f,props:{className:[g]},children:[{type:b,tag:h,props:{className:[i,j]},children:[{type:b,tag:e,props:{},children:[{type:a,value:"level=NOTICE uuid=9FF7F70E-5D57-435A-AAD9-EA069B6159D9.1 source=core message=disconnect ip=127.0.0.1 rdns=Unknown helo=3h2dnz8a0if relay=N early=N esmtp=N tls=N pipe=N errors=0 txns=1 rcpts=1\u002F0\u002F0 msgs=1\u002F0\u002F0 bytes=222 lr=\"\" time=0.052\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"You can find out more about logfmt here: "},{type:b,tag:k,props:{href:D,rel:[l,m,n],target:o},children:[{type:a,value:D}]}]}]},dir:"\u002Fen\u002Fcore",path:"\u002Fen\u002Fcore\u002FLogging",extension:".md",createdAt:E,updatedAt:E,to:"\u002Fcore\u002FLogging"},prev:{slug:F,title:F,to:"\u002Fcore\u002FNet_Utils"},next:{slug:"Outbound",title:"Outbound Mail with Haraka",to:"\u002Fcore\u002FOutbound"}}],fetch:[],mutations:[]}}("text","element","\n","p","code","div","nuxt-content-highlight","pre","language-text","line-numbers","a","nofollow","noopener","noreferrer","_blank","logging-api",2,"Logging API","see-also","See also","ul","li","h2","true",-1,"span","icon","icon-link","https:\u002F\u002Fgithub.com\u002Fharaka\u002FHaraka\u002Fpull\u002F119","https:\u002F\u002Fbrandur.org\u002Flogfmt","2020-12-21T00:45:07.184Z","Net_Utils")));